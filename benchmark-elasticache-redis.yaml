---
AWSTemplateFormatVersion: 2010-09-09
Description: 'EC2 Network Benchmark: elasticache (redis)'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label: {default: Parent Stacks}
      Parameters:
      - ParentVPCStack
      - ParentGlobalStack
    - Label: {default: Benchmark Parameters}
      Parameters:
      - BenchmarkId
      - Benchmarks
      - InstanceCountClient
      - InstanceTypeClient
      - RedisCustomParameterGroup
      - RedisCustomVersion
      - RedisDataSize
      - TestDuration
    - Label: {default: VPC Settings}
      Parameters:
      - InstanceSubnet
Parameters:
  BenchmarkId:
    Description: |
      Unique identifier for an execution. Primarily used when InstanceCountClient is >1
    Default: ''
    Type: String
  Benchmarks:
    Description: CloudWatch extended statistics to measure
    Default: p50,p70,p90,p95,p99
    Type: CommaDelimitedList
  InstanceCountClient:
    Description: Number of client instances to run
    Default: 1
    MinValue: 1
    Type: Number
  InstanceSubnet:
    Description: |
      Subnet to explicitly place ElastiCache & test instance into (overrides ParentVPCStack subnet import)
    Default: ''
    Type: String
  InstanceTypeClient:
    Default: t2.micro
    Description: The instance type for the client EC2 instance.
    Type: String
  KeyName:
    AllowedPattern: '^[a-zA-Z0-9_-]*'
    ConstraintDescription: can contain only alphanumeric characters, spaces, dashes, & underscores
    Default: ''
    Description: (optional) EC2 KeyPair Name
    Type: String
  ParentGlobalStack:
    Description: Stack name of parent global stack based on global.yaml template.
    Type: String
  ParentVPCStack:
    Description: Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.
    Default: ''
    Type: String
  RedisCustomParameterGroup:
    Description: (optional) customer Parameter group
    Default: ''
    Type: String
  RedisCustomVersion:
    Description: (optional) explicit Redis engine version
    Default: ''
    Type: String
  RedisDataSize:
    Description: Size (in bytes) to feed redis-benchmark -d
    Default: 1024
    MinValue: 100
    Type: Number
  RedisInstanceType:
    Description: The instance type for the Redis instance.
    Type: String
    Default: cache.t2.micro
  SpotPriceClient:
    Default: 0
    Description: The spot price for the EC2 instance.
    Type: Number
  TestDuration:
    Description: Number of seconds to run the test for, should always be a multiple of 60
    Default: 300
    MinValue: 60
    Type: Number

Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-531a4c3c'
    'eu-west-3':
      AMI: 'ami-8ee056f3'
    'eu-west-2':
      AMI: 'ami-403e2524'
    'eu-west-1':
      AMI: 'ami-d834aba1'
    'ap-northeast-2':
      AMI: 'ami-863090e8'
    'ap-northeast-1':
      AMI: 'ami-ceafcba8'
    'sa-east-1':
      AMI: 'ami-84175ae8'
    'ca-central-1':
      AMI: 'ami-a954d1cd'
    'ap-southeast-1':
      AMI: 'ami-68097514'
    'ap-southeast-2':
      AMI: 'ami-942dd1f6'
    'eu-central-1':
      AMI: 'ami-5652ce39'
    'us-east-1':
      AMI: 'ami-97785bed'
    'us-east-2':
      AMI: 'ami-f63b1193'
    'us-west-1':
      AMI: 'ami-824c4ee2'
    'us-west-2':
      AMI: 'ami-f2d3638a'

Conditions:
  HasInstanceSubnet: !Not [!Equals [!Ref InstanceSubnet, '']]
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasSpotPriceClient: !Not [!Equals [!Ref SpotPriceClient, 0]]
  HasRedisCustomParameterGroup: !Not [!Equals [!Ref RedisCustomParameterGroup, '']]
  HasRedisCustomVersion: !Not [!Equals [!Ref RedisCustomVersion, '']]

Resources:
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: ElastiCache Network Benchmark Group
      SubnetIds:
        - !If
          - HasInstanceSubnet
          - !Ref InstanceSubnet
          - Fn::ImportValue: !Sub ${ParentVPCStack}-SubnetAPublic

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    DependsOn: ElastiCacheSubnetGroup
    Properties:
      CacheNodeType: !Ref RedisInstanceType
      CacheParameterGroupName: !If
        - HasRedisCustomParameterGroup
        - !Ref RedisCustomParameterGroup
        - !Ref 'AWS::NoValue'
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Engine: redis
      EngineVersion: !If
        - HasRedisCustomVersion
        - !Ref RedisCustomVersion
        - !Ref 'AWS::NoValue'
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - Fn::ImportValue: !Sub ${ParentGlobalStack}-SecurityGroupId

  ClientMachineLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${ParentGlobalStack}-IAMInstanceProfileName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceMonitoring: true
      InstanceType: !Ref InstanceTypeClient
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ParentGlobalStack}-SecurityGroupId
      SpotPrice: !If [HasSpotPriceClient, !Ref SpotPriceClient, !Ref 'AWS::NoValue']
      UserData: 
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            set -exo pipefail

            cleanup ()
            {
              /opt/aws/bin/cfn-signal \
                -e $? \
                --resource ClientMachineAutoScalingGroup \
                --stack ${AWS::StackName} \
                --region ${AWS::Region}
            }
            trap cleanup EXIT

            # Enable EPEL
            yum-config-manager --enable epel
            yum clean all

            # Install required utilities
            yum -y install \
              jq \
              redis
            which \
              jq \
              redis-benchmark

            # Set some arbitrary keys
            redis-benchmark \
              -h ${ElastiCacheCluster.RedisEndpoint.Address} \
              -p ${ElastiCacheCluster.RedisEndpoint.Port} \
              -t set \
              -d ${RedisDataSize} \
              -q

            # Execute the test for the specified time
            startTime=$(date +%s)
            set +e
            timeout ${TestDuration} \
              redis-benchmark \
                -h ${ElastiCacheCluster.RedisEndpoint.Address} \
                -p ${ElastiCacheCluster.RedisEndpoint.Port} \
                -t get \
                -d ${RedisDataSize} \
                -n 100000000 \
                -q
            set -e
            timeNow=$(date +%s)
            elapsedTime=$(($timeNow-$startTime))

            if [[ $elapsedTime -eq 0 ]]
            then
              echo "Failed to run redis-benchmark"
              exit 1
            fi

            # Determine what the bandwidth was like for this period
            aws cloudwatch get-metric-statistics \
              --dimensions Name=CacheClusterId,Value=${ElastiCacheCluster} \
              --end-time $(date --iso-8601=seconds) \
              --extended-statistics ${BenchmarksList} \
              --metric-name NetworkBytesOut \
              --namespace AWS/ElastiCache \
              --period $(($elapsedTime-($elapsedTime%60))) \
              --region ${AWS::Region} \
              --start-time $(date --iso-8601=seconds -d "-$elapsedTime seconds") \
              | jq -cr '.Datapoints[0].ExtendedStatistics' \
              | jq -cr '. + {benchmarkId: "${BenchmarkId}"}' \
              | jq -cr '. + {dataSize: ${RedisDataSize}}' \
              | jq -cr '. + {instanceCount: ${InstanceCountClient}}' \
              | jq -cr '. + {instanceType: "${RedisInstanceType}"}' \
              | jq -cr '. + {instanceTypeClient: "${InstanceTypeClient}"}' \
              | jq -cr '. + {region: "${AWS::Region}"}' \
              | jq -cr ". + {stamp: $timeNow}" \
              | jq -cr '. + {testDuration: ${TestDuration}}' \
              | jq -cr ". + {testElapsed: $elapsedTime}" \
              | gzip \
              | aws s3 cp \
                - \
                "s3://${DestinationBucket}/v2-cache/d=$(date +%Y-%m-%d)/${RedisInstanceType}-$(date +%s).json.gz"
          -
            BenchmarksList: !Join [' ', !Ref Benchmarks]
            DestinationBucket:
              Fn::ImportValue: !Sub ${ParentGlobalStack}-S3BucketName

  ClientMachineAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ClientMachineLaunchConfig
      MinSize: !Ref InstanceCountClient
      MaxSize: !Ref InstanceCountClient
      DesiredCapacity: !Ref InstanceCountClient
      VPCZoneIdentifier:
        - !If
          - HasInstanceSubnet
          - !Ref InstanceSubnet
          - Fn::ImportValue: !Sub ${ParentVPCStack}-SubnetAPublic
      Tags:
        - Key: Name
          Value: EC2 Network Benchmark Client
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref InstanceCountClient
        Timeout: PT75M

Outputs:
  StackName:
    Description: Stack name
    Value: !Sub ${AWS::StackName}

# vim: ft=yaml sw=2 ts=2
